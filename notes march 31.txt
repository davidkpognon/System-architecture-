In MIPS, the Instruction set architecture determines many aspects of the processor implementation. For example, implementational strategies and goals affect clock rate and CPI.The employment of logic pieces and timing techniques reflects these implementational considerations. The outputs of combinational elements like adders, multiplexers, and shifters, for example, are solely dependent on the present inputs. Sequential elements, such as memory and registers, however, store state information, and their output is therefore dependent on both their inputs and the stored state. The clock controls the timing of events within a gate and governs when signals can be transformed to data that can be read or written to processor components.
We don't require a "safety mechanism" to avoid unintended overwriting of stored data because reading a register-stored value does not modify the state of the register, and we simply need to input the register number to get the data stored in that register.